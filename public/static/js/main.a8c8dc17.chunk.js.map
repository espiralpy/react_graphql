{"version":3,"sources":["components/launchItem.js","components/launches.js","components/launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","console","log","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","LAUNCHES_QUERY","gql","_templateObject","Launches","state","react","react_apollo_esm","query","loading","error","data","launches","map","launchItem","key","Component","LAUNCH_QUERY","launch_templateObject","Launch","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8c8dc17.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({\n    launch: {\n        flight_number,\n        mission_name,\n        launch_date_local,\n        launch_success\n    }\n}) => {\n    console.log(flight_number)\n    return (\n        <div className='card card-body mb-3'>\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success,\n                    })}>\n                            {mission_name}\n                        </span>\n                    </h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n                        Launch details\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LaunchItem;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './launchItem';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nclass Launches extends Component {\n    state = {  }\n    render() {\n        return (\n            <Fragment>\n                <h4 className=\"display-4 my-3\">Launches</h4>\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (error) console.log(error)\n                            console.log(data);\n\n                            return <Fragment>\n                                {\n                                    data.launches.map(launch => {\n                                        return <LaunchItem key={launch.flight_number} launch={launch} />\n                                    })\n                                }\n                            </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launches;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (error) console.log(error);\n                            console.log(data)\n                            const {\n                                flight_number,\n                                mission_name,\n                                launch_year,\n                                launch_success,\n                                launch_date_local,\n                                rocket: {\n                                    rocket_id,\n                                    rocket_name,\n                                    rocket_type\n                                }\n                            } = data.launch;\n                            return <div>\n                                <h1 className=\"display-4 my-3\">\n                                    <span className=\"text-dark\">\n                                        Mission:\n                                    </span>{mission_name}\n                                </h1>\n                                <h4 className=\"mb-3\">Launch details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">\n                                        Flight number: {flight_number}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch year: {launch_year}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch successful: <span className={classNames({\n                                            'text-success': launch_success,\n                                            'text-danger': !launch_success,\n                                        })}>\n                                            {launch_success ? 'yes' : 'no'}\n                                        </span>\n                                    </li>\n                                </ul>\n                                <h4 className=\"my-3\">Rocket details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">\n                                        Rocket ID: {rocket_id}\n                                    </li>\n\n                                    <li className=\"list-group-item\">\n                                        Rocket name: {rocket_name}\n                                    </li>\n\n                                    <li className=\"list-group-item\">\n                                        Rocket type: {rocket_type}\n                                    </li>\n                                </ul>\n                                <hr/>\n                                <Link to=\"/\" className=\"btn btn-secondary\">\n                                        Back\n                                </Link>\n                            </div>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launch;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/launches';\nimport Launch from './components/launch';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\nclass App extends Component {\n    render() {\n        return (\n          <ApolloProvider client={client}>\n            <Router>\n              <div className=\"App container\">\n                  <h1>SpaceX</h1>\n                  <Route exact path=\"/\" component={Launches}/>\n                  <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n              </div>\n            </Router>\n          </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}